# nginx定义403  要在 server里面加上 error_page  403 /403.html;
nginx 将403 ip 返回在403界面 要在location里面加上
        location  /403.html {
                default_type text/html;
                add_header Content-Type 'text/html; charset=utf-8';
                return 200   "<html> <head><title>403 Forbidden</title></head> <body> <center><h1>403 Forbidden</h1></center> <center><h1>powered by rice</h1></center> <hr><center>client_ip:$remote_addr</center> </body> </html>";
        #        allow   all;
                        }
然后重载nginx即可


## ngixn 优化
1.屏蔽nginx版本号
在http 字段添加
server_tokens off;
然后重载nginx即可

# 工作进程数：
events {
    worker_connections  1024;  # 每个工作进程的最大连接数
}

# 设置keepalive连接时间：
http {
    keepalive_timeout 65;  # 保持连接的时间
}

# 开启gzip压缩：
http {
    gzip on;  # 开启gzip压缩
}

# 设置nginx status 在server里面
location /status {
  stub_status on;
  allow 192.168.0.0/16;
  deny all;
}

[root@ct7-5 conf]# curl 192.168.31.58/status
Active connections: 1 
server accepts handled requests
 7 7 34 
Reading: 0 Writing: 1 Waiting: 0

# nginx status详解
Active connections – 活跃的连接数量
server accepts handled requests — 总共处理了7个连接 , 成功创建7次握手, 总共处理了34个请求。
# 注意，重启nginx 计数清0
reading — 读取客户端的连接数。
writing — 响应数据到客户端的数量。
waiting — 开启 keep-alive 的情况下,这个值等于 active – (reading+writing), 意思就是 Nginx 已经处理完正在等候下一次请求指令的驻留连接。


# 配置缓冲区大小： 
http {
    client_body_buffer_size 1K;  # 客户端请求体缓冲区大小
    client_header_buffer_size 1k;  # 客户端请求头缓冲区大小
    large_client_header_buffers 4 4k;  # 大客户端请求头缓冲区数量和大小
}

# 设置最大文件描述符数：
worker_rlimit_nofile 65535;  # 设置工作进程的最大文件打开数

# 设置最大请求体大小：
http {
    client_max_body_size 10m;  # 设置最大请求体大小
}


# 配置静态文件缓存：
location ~* \.(jpg|jpeg|png|css|js|ico|html)$ {
    expires 30d;  # 设置缓存过期时间
}

#nginx 防御部分攻击 有特征
#括号内容是URI参数 
if ($args ~* mynameis=ddos) {
return 444;
}
然后重载nginx即可

#限制访问某些目录 在server字段里面添加 重载
if ($uri ~* api) {
return 444;
}

#限制ip访问 允许ip访问 在server字段添加
allow 127.0.0.1;
deny 192.168.31.85;
deny all;

# nginx限制请求频率 请求次数
http {

# limit_req_zone: 定义了一个名为mylimit的内存区域，大小为10MB，允许的请求速率为每秒2个请求。
# zone=mylimit:10m: mylimit是定义的内存区域的名称，后面跟着内存区域的大小，这里是10MB。
# rate=2r/s: rate指定了允许的请求速率，这里是每秒2个请求。
# limit_req: 指定使用mylimit区域来限制请求的频率。
# 这个配置将导致如果某个IP地址尝试超过每秒2个请求的频率，Nginx将返回状态码503，表示服务不可用。
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s;
 
    server {
        location / {
            limit_req zone=mylimit;
            proxy_pass http://backend;
        }
    }
}


# nginx 设置日志时间格式 在servser里面添加
if ( $time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})" ) {
  set $year $1;
  set $month $2;
  set $day $3;
  set $hour $4;
  set $minutes $5;
  set $seconds $6;
  set $time_zh "$1-$2-$3 $4:$5:$6";
}
# 获取毫秒时间戳，并拼接到$time_zh之后
  if ( $msec ~ "(\d+)\.(\d+)") {
     set $time_zh_ms $time_zh.$2;
}
# 修改 log_format  main  [$time_local] 为 log_format  main  [$time_zh_ms]  其它不变 重载即可


# nginx转发真实ip 在location 里面添加 重载即可
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;


# Nginx的日志文件中，每一行都代表了一个HTTP请求或响应的信息。这些信息可以包含许多有用的字段，如下：

# 日志格式：
$remote_addr：客户端IP地址。
$remote_user：客户端用户名。
$time_local：访问时间和时区。
$request：请求的方法、URL和HTTP协议。
$status：HTTP请求的状态。
$body_bytes_sent：发送给客户端的字节数，不包括响应头的大小。
$http_referer：referer URL。
$http_user_agent：客户端浏览器信息。
$http_x_forwarded_for：客户端的真实IP地址。

# 添加服务器ip头部信息（测试用）
add_header X-Server-IP $server_addr;  #在 http 里面

# 统计负载均衡集群每台服务器访问次数
add_header cluster_id $hostname;(增加头部信息,显示主机名,添加在nginx配置文件http下)

for i in {1..100}
  do
    curl -si http://139.9.101.176/  | grep -P "cluster_id"   #cluster_id是集群主机的名字
  done  | sort | uniq -c
